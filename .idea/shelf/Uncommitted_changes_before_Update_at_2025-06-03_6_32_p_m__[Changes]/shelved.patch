Index: testing/test_turn_dict_to_obj.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import pytest\r\nfrom web_client.turn_dict_to_obj import *\r\n\r\n# temporary\r\nfrom client_package.web_client.turn_dict_to_obj import *\r\n\r\n\r\ndef test_make_dict_to_obj():\r\n    data = {'area': 10, 'date_of_introduction': 1970, 'designer': 'Garrett AiResearch', 'process': 100,\r\n            'processor': 'MP944 (20-bit, 6-chip)', 'transistor_count': 'NA'}\r\n    cpu1 = make_dict_to_obj(data)\r\n    for key in data.keys():\r\n        assert data[key] == cpu1.get_dict()[key]\r\n\r\n\r\ndef test_make_dict_to_obj1():\r\n    with pytest.raises(ValueError):\r\n        data = {\"bad\": \"data\"}\r\n        make_dict_to_obj(data)\r\n\r\n\r\ndef test_make_list_of_dict_to_obj():\r\n    data = [{'area': 100, 'date_of_introduction': 1970, 'designer': 'cool designer', 'process': 100,\r\n             'processor': 'cool chip name', 'transistor_count': 10000000},\r\n            {'area': 10, 'date_of_introduction': 1970, 'designer': 'cool designer', 'process': 100,\r\n             'processor': 'cool chip name', 'transistor_count': 10000000},\r\n            {'area': 100, 'date_of_introduction': 1870, 'designer': 'cool designer', 'process': 100,\r\n             'processor': 'cool chip name', 'transistor_count': 10000000}]\r\n    list_of_obj = make_list_of_dict_to_obj(data)\r\n    for i in range(len(list_of_obj)):\r\n        for key in data[0].keys():\r\n            assert data[i][key] == list_of_obj[i].get_dict()[key]\r\n\r\n\r\ndef test_make_list_of_dict_to_obj1():\r\n    with pytest.raises(ValueError):\r\n        data = [{'bad': \"data1\"},\r\n                {'bad': \"data2\"},\r\n                {'area': 100, 'date_of_introduction': 1870, 'designer': 'cool designer', 'process': 100,\r\n                 'processor': 'cool chip name', 'transistor_count': 10000000}]\r\n        make_list_of_dict_to_obj(data)\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/testing/test_turn_dict_to_obj.py b/testing/test_turn_dict_to_obj.py
--- a/testing/test_turn_dict_to_obj.py	(revision 31cc95f0f9f3c38e688bbb7b8f264e40479d35ea)
+++ b/testing/test_turn_dict_to_obj.py	(date 1748966263647)
@@ -2,7 +2,7 @@
 from web_client.turn_dict_to_obj import *
 
 # temporary
-from client_package.web_client.turn_dict_to_obj import *
+# from client_package.web_client.turn_dict_to_obj import *
 
 
 def test_make_dict_to_obj():
Index: testing/test_ram.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import pytest\r\nfrom web_client.ram import Ram\r\nfrom web_client.main import get_specific_component_s\r\n\r\n# temporary\r\nfrom client_package.web_client.ram import Ram\r\nfrom client_package.web_client.main import get_specific_component_s\r\n\r\n\r\ndef get_comp_results(ram: Ram):\r\n    result = get_specific_component_s(\"ram\", {\r\n        \"chip_name\": ram.processor_name,\r\n        \"transistor_count\": ram.transistor_count,\r\n        \"date_of_introduction\": ram.year_of_introduction,\r\n        \"area\": ram.area,\r\n        \"process\": ram.process,\r\n        \"manufacturer_s\": ram.manufacturer,\r\n        \"bit_units\": ram.bit_units,\r\n        \"capacity_bits\": ram.capacity_bits,\r\n        \"ram_type\": ram.ram_type\r\n    })[0]\r\n    return result\r\n\r\n\r\ndef test_ram_init():\r\n    ram = Ram(\"DDR5\", 1000, 2020, 250, 10, \"Gb\", 16384, \"Corsair\", \"DDR5\")\r\n    result = get_comp_results(ram)\r\n    for key in ram.get_dict().keys():\r\n        assert result[key] == ram.get_dict()[key]\r\n\r\n\r\ndef test_ram_transistor_count():\r\n    ram = Ram(\"DDR5\", 1000, 2020, 250, 10, \"Gb\", 16384, \"Corsair\", \"DDR5\")\r\n    ram.transistor_count = 9999\r\n    result = get_comp_results(ram)\r\n    assert ram.transistor_count == result[\"transistor_count\"]\r\n\r\n\r\ndef test_ram_transistor_count_invalid():\r\n    ram = Ram(\"DDR5\", 1000, 2020, 250, 10, \"Gb\", 16384, \"Corsair\", \"DDR5\")\r\n    with pytest.raises(ValueError):\r\n        ram.transistor_count = -100\r\n\r\n\r\ndef test_processor_name_setter():\r\n    ram = Ram(\"DDR4\", 2000, 2015, 100, 22, \"Mb\", 8192, \"Samsung\", \"DDR4\")\r\n    ram.processor_name = \"LPDDR5X\"\r\n    result = get_comp_results(ram)\r\n    assert ram.processor_name == result[\"chip_name\"]\r\n\r\n\r\ndef test_year_of_introduction_valid():\r\n    ram = Ram(\"DDR5\", 3000, 2019, 200, 7, \"Gb\", 32768, \"G.Skill\", \"DDR5\")\r\n    ram.year_of_introduction = 2022\r\n    result = get_comp_results(ram)\r\n    assert ram.year_of_introduction == result[\"date_of_introduction\"]\r\n\r\n\r\ndef test_year_of_introduction_invalid():\r\n    ram = Ram(\"DDR5\", 3000, 2019, 200, 7, \"Gb\", 32768, \"G.Skill\", \"DDR5\")\r\n    with pytest.raises(ValueError):\r\n        ram.year_of_introduction = 0\r\n\r\n\r\ndef test_area_setter_valid():\r\n    ram = Ram(\"DDR3\", 1500, 2010, 180, 22, \"Mb\", 4096, \"Kingston\", \"DDR3\")\r\n    ram.area = 400\r\n    result = get_comp_results(ram)\r\n    assert ram.area == result[\"area\"]\r\n\r\n\r\ndef test_area_setter_invalid():\r\n    ram = Ram(\"DDR3\", 1500, 2010, 180, 22, \"Mb\", 4096, \"Kingston\", \"DDR3\")\r\n    with pytest.raises(ValueError):\r\n        ram.area = -20\r\n\r\n\r\ndef test_process_setter_valid():\r\n    ram = Ram(\"DDR4\", 2000, 2016, 140, 14, \"Gb\", 16384, \"Micron\", \"DDR4\")\r\n    ram.process = 5\r\n    result = get_comp_results(ram)\r\n    assert ram.process == result[\"process\"]\r\n\r\n\r\ndef test_process_setter_invalid():\r\n    ram = Ram(\"DDR4\", 2000, 2016, 140, 14, \"Gb\", 16384, \"Micron\", \"DDR4\")\r\n    with pytest.raises(ValueError):\r\n        ram.process = 0\r\n\r\n\r\ndef test_bit_units_setter():\r\n    ram = Ram(\"LPDDR4\", 1200, 2018, 120, 10, \"Mb\", 8192, \"SK Hynix\", \"LPDDR4\")\r\n    ram.bit_units = \"Gb\"\r\n    result = get_comp_results(ram)\r\n    assert ram.bit_units == result[\"bit_units\"]\r\n\r\n\r\ndef test_capacity_bits_setter():\r\n    ram = Ram(\"LPDDR4\", 1200, 2018, 120, 10, \"Mb\", 8192, \"SK Hynix\", \"LPDDR4\")\r\n    ram.capacity_bits = 65536\r\n    result = get_comp_results(ram)\r\n    assert ram.capacity_bits == result[\"capacity_bits\"]\r\n\r\n\r\ndef test_capacity_bits_invalid():\r\n    ram = Ram(\"LPDDR4\", 1200, 2018, 120, 10, \"Mb\", 8192, \"SK Hynix\", \"LPDDR4\")\r\n    with pytest.raises(ValueError):\r\n        ram.capacity_bits = -100\r\n\r\n\r\ndef test_manufacturer_setter():\r\n    ram = Ram(\"DDR3\", 1400, 2012, 170, 20, \"Mb\", 4096, \"OldManu\", \"DDR3\")\r\n    ram.manufacturer = \"NewManu\"\r\n    result = get_comp_results(ram)\r\n    assert ram.manufacturer == result[\"manufacturer_s\"]\r\n\r\n\r\ndef test_ram_type_setter():\r\n    ram = Ram(\"SomeChip\", 500, 2008, 90, 32, \"Mb\", 2048, \"Generic\", \"OldType\")\r\n    ram.ram_type = \"UpdatedType\"\r\n    result = get_comp_results(ram)\r\n    assert ram.ram_type == result[\"ram_type\"]\r\n\r\n\r\ndef test_describe_component_features():\r\n    ram = Ram(\"TestRam\", 100, 2000, 10, 45, \"Gb\", 1024, \"TestManu\", \"TestType\")\r\n    output = ram.describe_component_features()\r\n    expected_output = \"\"\"\r\n_________________________________________________________________________________\r\n|variable\t            |class\t    |description                                  |\r\n|-----------------------|-----------|---------------------------------------------|\r\n|chip_name\t            |string  \t|chip name                                    |\r\n|capacity_bits          |integer    |how many units of information it can work on |\r\n|transistor_count\t    |integer    |Number of transistors                        |\r\n|bit_units              |string     |Units for bit capacity (bits < kb < Mb < Gb) |\r\n|ram_type               |string     |Ram type                                     |\r\n|date_of_introduction\t|integer\t|year introduced                              |\r\n|designer\t            |string \t|Designer                                     |\r\n|process\t            |integer    |Size of manufacturing process (in nanometers)|\r\n|area\t                |integer\t|Area of chip in square millimeters           |\r\n|manufacturer_s         |string     |manufacturer(s)                              |\r\n_________________________________________________________________________________\r\n        \"\"\"\r\n    assert output == expected_output\r\n\r\n\r\ndef test_get_dict():\r\n    ram = Ram(\"DDR5\", 1000, 2020, 250, 10, \"Gb\", 16384, \"Corsair\", \"DDR5\")\r\n    result = get_comp_results(ram)\r\n    assert ram.get_dict() == result\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/testing/test_ram.py b/testing/test_ram.py
--- a/testing/test_ram.py	(revision 31cc95f0f9f3c38e688bbb7b8f264e40479d35ea)
+++ b/testing/test_ram.py	(date 1748966263643)
@@ -3,8 +3,8 @@
 from web_client.main import get_specific_component_s
 
 # temporary
-from client_package.web_client.ram import Ram
-from client_package.web_client.main import get_specific_component_s
+# from client_package.web_client.ram import Ram
+# from client_package.web_client.main import get_specific_component_s
 
 
 def get_comp_results(ram: Ram):
Index: testing/test_main.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import pytest\r\nfrom web_client.main import *\r\nfrom web_client.turn_dict_to_obj import *\r\n\r\n# temporary imports\r\nfrom client_package.web_client.main import *\r\nfrom client_package.web_client.turn_dict_to_obj import *\r\n\r\n\r\n# MAKE SURE TO RUN ADD_DATA_TO_MONGO SCRIPT TO RESET ALL DATA BEFORE RUNNING WHOLE TEST FILE\r\n\r\n\r\ndef test_home_message():\r\n    expected_res = {'authors': ['William Ambrosetti', 'Youssef Sedra'], 'message': 'welcome to our web service',\r\n                    'methods': ['get_component_names', 'get_components_features', 'get_all_collections',\r\n                                'get_a_collection', 'check_if_component_exists', 'get_specific_component_s', 'add_data',\r\n                                'add_many', 'update_a_component', 'delete_component_s', 'delete_collection',\r\n                                'plot_components']}\r\n    results = home_message()\r\n    assert results == expected_res\r\n\r\n\r\ndef test_get_component_names():\r\n    expected_res = ['gpu', 'cpu', 'ram']\r\n    results = get_component_names()\r\n    assert set(results) == set(expected_res)\r\n\r\n\r\ndef test_get_components_features():\r\n    expected_res = ['area', 'date_of_introduction', 'designer', 'process', 'processor', 'transistor_count']\r\n    results = get_components_features(\"cpu\")\r\n    assert expected_res == results\r\n\r\n\r\ndef test_get_components_features1():\r\n    expected_res = {'cpu': ['area',\r\n                            'date_of_introduction',\r\n                            'designer',\r\n                            'process',\r\n                            'processor',\r\n                            'transistor_count'],\r\n                    'gpu': ['area',\r\n                            'date_of_introduction',\r\n                            'designer_s',\r\n                            'manufacturer_s',\r\n                            'process',\r\n                            'processor',\r\n                            'transistor_count'],\r\n                    'ram': ['area',\r\n                            'bit_units',\r\n                            'capacity_bits',\r\n                            'chip_name',\r\n                            'date_of_introduction',\r\n                            'manufacturer_s',\r\n                            'process',\r\n                            'ram_type',\r\n                            'transistor_count']}\r\n    results = get_components_features(None)\r\n    assert expected_res == results\r\n\r\n\r\ndef test_get_components_features2():\r\n    with pytest.raises(ValueError):\r\n        bad_collection = \"bad\"\r\n        get_components_features(bad_collection)\r\n\r\n\r\ndef test_get_all_collections():\r\n    result = get_all_collections()\r\n    expected_res = list\r\n    assert isinstance(result, expected_res)\r\n    assert result != []\r\n\r\n\r\ndef test_get_a_collection():\r\n    result = get_a_collection(\"cpu\")\r\n    expected_res = list\r\n    assert isinstance(result, expected_res)\r\n    assert result != []\r\n\r\n\r\ndef test_get_a_collection1():\r\n    with pytest.raises(ValueError):\r\n        bad_collection = \"bad\"\r\n        get_a_collection(bad_collection)\r\n\r\n\r\ndef test_check_if_component_exists():\r\n    component_data = {'area': 100, 'date_of_introduction': 1970, 'designer': 'cool designer', 'process': 100,\r\n                      'processor': 'cool chip name', 'transistor_count': 10000000}\r\n    delete_component_s(\"cpu\", component_data)\r\n    assert check_if_component_exists(component_data) == False\r\n\r\n\r\ndef test_check_if_component_exists1():\r\n    component_data = {'area': 100, 'date_of_introduction': 1970, 'designer': 'cool designer', 'process': 100,\r\n                      'processor': 'cool chip name', 'transistor_count': 10000000}\r\n    add_data(\"cpu\", component_data)\r\n    assert check_if_component_exists(component_data) == True\r\n\r\n\r\ndef test_check_if_component_exists2():\r\n    invalid_data = {\"invalid\": \"component_data\"}\r\n    result = check_if_component_exists(invalid_data)\r\n    assert result == False\r\n\r\n\r\ndef test_get_specific_component_s():\r\n    component_data = {'area': 100, 'date_of_introduction': 1970, 'designer': 'cool designer', 'process': 100,\r\n                      'processor': 'cool chip name', 'transistor_count': 10000000}\r\n    add_data(\"cpu\", component_data)\r\n    result = get_specific_component_s(\"cpu\", component_data)\r\n    expected_res = {'area': 100, 'date_of_introduction': 1970, 'designer': 'cool designer', 'process': 100,\r\n                    'processor': 'cool chip name', 'transistor_count': 10000000}\r\n    assert result[0] == expected_res\r\n\r\n\r\ndef test_get_specific_component_s1():\r\n    results = get_specific_component_s(\"cpu\", {'transistor_count__gt': 9000000000})\r\n    expected_res = list\r\n    assert isinstance(results, expected_res)\r\n    assert results != []\r\n\r\n\r\ndef test_get_specific_component_s2():\r\n    with pytest.raises(ValueError):\r\n        bad_collection = \"bad\"\r\n        get_specific_component_s(bad_collection, {'transistor_count__gt': 9000000000})\r\n\r\n\r\ndef test_get_specific_component_s3():\r\n    result = get_specific_component_s(\"cpu\")\r\n    expected_res = get_a_collection(\"cpu\")\r\n    assert result == expected_res\r\n\r\n\r\ndef test_add_data():\r\n    component_data = {'area': 100, 'date_of_introduction': 1970, 'designer': 'cool designer', 'process': 100,\r\n                      'processor': 'cool chip name', 'transistor_count': 10000000}\r\n    add_data(\"cpu\", component_data)\r\n    expected_res = {'area': 100, 'date_of_introduction': 1970, 'designer': 'cool designer', 'process': 100,\r\n                    'processor': 'cool chip name', 'transistor_count': 10000000}\r\n    results = get_specific_component_s(\"cpu\", component_data)[0]\r\n    assert expected_res == results\r\n\r\n\r\ndef test_add_data1():\r\n    component_data = {'area': 100, 'date_of_introduction': 1970, 'designer': 'cool designer', 'process': 100,\r\n                      'processor': 'cool chip name', 'transistor_count': 10000000}\r\n    cpu1 = make_dict_to_obj(component_data)\r\n    add_data(\"cpu\", cpu1)\r\n    results = get_specific_component_s(\"cpu\", component_data)[0]\r\n    assert results == component_data\r\n\r\n\r\ndef test_add_data2(capsys):\r\n    component_data = {\"bad\": \"data\"}\r\n    add_data(\"cpu\", component_data)\r\n    captured = capsys.readouterr()\r\n    assert \"\"\"{'error': 'data not in correct format', 'expected_keys': ['processor', 'transistor_count', 'date_of_introduction', 'designer', 'process', 'area'], 'received_keys': ['bad']}\"\"\" in captured.out\r\n\r\n\r\ndef test_add_data3():\r\n    with pytest.raises(ValueError):\r\n        component_data = {'area': 100, 'date_of_introduction': 1970, 'designer': 'cool designer', 'process': 100,\r\n                          'processor': 'cool chip name', 'transistor_count': 10000000}\r\n        add_data(\"bad\", component_data)\r\n\r\n\r\ndef test_add_data4():\r\n    with pytest.raises(ValueError):\r\n        bad_col_name = \"bad\"\r\n        add_data(bad_col_name, {'area': 100, 'date_of_introduction': 1970, 'designer': 'cool designer', 'process': 100,\r\n                                'processor': 'cool chip name', 'transistor_count': 10000000})\r\n\r\n\r\ndef test_add_data5(capsys):\r\n    add_data(\"gpu\", {})\r\n    captured = capsys.readouterr()\r\n    assert \"{'error': 'No data provided'}\" in captured.out\r\n\r\n\r\ndef test_add_data6(capsys):\r\n    data = {'area': 100, 'date_of_introduction': 1970, 'designer': 'cool designer', 'process': 100,\r\n            'processor': 'cool chip name', 'transistor_count': 10000000}\r\n    delete_component_s(\"cpu\", data)\r\n    add_data(\"cpu\", data)\r\n    add_data(\"cpu\", data)\r\n    captured = capsys.readouterr()\r\n    assert \"{'error': 'data already present'}\\n\" in captured.out\r\n\r\n\r\ndef test_add_many(capsys):\r\n    data = [{'area': 100, 'date_of_introduction': 1970, 'designer': 'cool designer', 'process': 100,\r\n             'processor': 'cool chip name', 'transistor_count': 10000000},\r\n            {'area': 10, 'date_of_introduction': 1970, 'designer': 'cool designer', 'process': 100,\r\n             'processor': 'cool chip name', 'transistor_count': 10000000},\r\n            {'area': 100, 'date_of_introduction': 1870, 'designer': 'cool designer', 'process': 100,\r\n             'processor': 'cool chip name', 'transistor_count': 10000000}]\r\n    delete_component_s(\"cpu\", {'designer': 'cool designer'})\r\n    add_many(\"cpu\", data)\r\n    captured = capsys.readouterr()\r\n    assert \"{'message': 'data inserted successfully'}\" in captured.out\r\n\r\n\r\ndef test_add_many1():\r\n    with pytest.raises(ValueError):\r\n        data = []\r\n        add_many(\"cpu\", data)\r\n\r\n\r\ndef test_add_many2():\r\n    with pytest.raises(ValueError):\r\n        add_many(\"bad\", [])\r\n\r\n\r\ndef test_update_a_component(capsys):\r\n    data = {'area': 100, 'date_of_introduction': 1970, 'designer': 'cool designer', 'process': 100, 'processor': 'cool chip name', 'transistor_count': 10000000}\r\n    add_data(\"cpu\", data)\r\n    update_a_component(\"cpu\", data, data={'date_of_introduction': 1971})\r\n    captured = capsys.readouterr()\r\n    assert \"{'message': 'updated one component'}\" in captured.out\r\n\r\n\r\ndef test_update_a_component1(capsys):\r\n    data = {'area': 100, 'date_of_introduction': 1970, 'designer': 'cool designer', 'process': 100, 'processor': 'cool chip name', 'transistor_count': 10000000}\r\n    add_data(\"cpu\", data)\r\n    update_a_component(\"cpu\", data, data={})\r\n    captured = capsys.readouterr()\r\n    assert \"{'error': 'No data provided'}\" in captured.out\r\n\r\n\r\ndef test_update_a_component2(capsys):\r\n    data = {\"invalid\": \"data\"}\r\n    add_data(\"cpu\", data)\r\n    update_a_component(\"cpu\", data, data={'area': 100})\r\n    captured = capsys.readouterr()\r\n    assert \"{'error': 'data not in correct format', 'expected_keys': ['processor', 'transistor_count', 'date_of_introduction', 'designer', 'process', 'area'], 'received_keys': ['invalid']}\" in captured.out\r\n\r\n\r\ndef test_update_a_component3(capsys):\r\n    with pytest.raises(ValueError):\r\n        data = {'area': 100, 'date_of_introduction': 1970, 'designer': 'cool designer', 'process': 100, 'processor': 'cool chip name', 'transistor_count': 10000000}\r\n        add_data(\"bad\", data)\r\n\r\n\r\ndef test_delete_component_s(capsys):\r\n    data = {'area': 100, 'date_of_introduction': 1970, 'designer': 'cool designer', 'process': 100,\r\n            'processor': 'cool chip name', 'transistor_count': 10000000}\r\n    add_data(\"cpu\", data)\r\n    delete_component_s(\"cpu\", data)\r\n    captured = capsys.readouterr()\r\n    assert \"{'message': 'removed 1 component(s)'}\" in captured.out\r\n\r\n\r\ndef test_delete_component_s1(capsys):\r\n    data = [{'area': 100, 'date_of_introduction': 1, 'designer': 'cool designer', 'process': 100,\r\n             'processor': 'cool chip name', 'transistor_count': 10000000},\r\n            {'area': 10, 'date_of_introduction': 2, 'designer': 'cool designer', 'process': 100,\r\n             'processor': 'cool chip name', 'transistor_count': 10000000},\r\n            {'area': 100, 'date_of_introduction': 3, 'designer': 'cool designer', 'process': 100,\r\n             'processor': 'cool chip name', 'transistor_count': 10000000}]\r\n    add_many(\"cpu\", data)\r\n    delete_component_s(\"cpu\", {'date_of_introduction__lt': 5})\r\n    captured = capsys.readouterr()\r\n    assert \"{'message': 'removed 3 component(s)'}\" in captured.out\r\n\r\n\r\ndef test_delete_component_s2(capsys):\r\n    # run add data to mongo script\r\n    delete_component_s(\"ram\", {})\r\n    captured = capsys.readouterr()\r\n    assert \"{'message': 'removed collection ram'}\" in captured.out\r\n\r\n\r\ndef test_delete_component_s3():\r\n    with pytest.raises(ValueError):\r\n        delete_component_s(\"ram\", {})\r\n        delete_component_s(\"ram\", {})\r\n\r\n\r\ndef test_delete_component_s4():\r\n    with pytest.raises(ValueError):\r\n        delete_component_s(\"bad\", {'date_of_introduction__lt': 5})\r\n\r\n\r\ndef test_delete_collection():\r\n    with pytest.raises(ValueError):\r\n        delete_component_s(\"gpu\")\r\n        get_a_collection(\"gpu\")\r\n\r\n\r\ndef test_delete_collection1():\r\n    with pytest.raises(ValueError):\r\n        delete_component_s(\"bad\")\r\n\r\n\r\ndef test_plot_components():\r\n    with pytest.raises(ValueError):\r\n        plot_components(\"cpu\", \"bad\")\r\n\r\n\r\ndef test_plot_components1():\r\n    with pytest.raises(ValueError):\r\n        plot_components([\"bad\", \"worse\", \"cpu\"], feature=\"transistor_count\")\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/testing/test_main.py b/testing/test_main.py
--- a/testing/test_main.py	(revision 31cc95f0f9f3c38e688bbb7b8f264e40479d35ea)
+++ b/testing/test_main.py	(date 1748966263639)
@@ -3,8 +3,8 @@
 from web_client.turn_dict_to_obj import *
 
 # temporary imports
-from client_package.web_client.main import *
-from client_package.web_client.turn_dict_to_obj import *
+# from client_package.web_client.main import *
+# from client_package.web_client.turn_dict_to_obj import *
 
 
 # MAKE SURE TO RUN ADD_DATA_TO_MONGO SCRIPT TO RESET ALL DATA BEFORE RUNNING WHOLE TEST FILE
Index: testing/test_cpu.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import pytest\r\nfrom web_client.cpu import Cpu\r\nfrom web_client.main import get_specific_component_s\r\n\r\n# temporary\r\nfrom client_package.web_client.cpu import Cpu\r\nfrom client_package.web_client.main import get_specific_component_s\r\n\r\n\r\ndef get_comp_results(cpu: Cpu):\r\n    result = get_specific_component_s(\"cpu\", {\"processor\": cpu.processor_name,\r\n                                              \"transistor_count\": cpu.transistor_count,\r\n                                              \"date_of_introduction\": cpu.year_of_introduction,\r\n                                              \"area\": cpu.area,\r\n                                              \"process\": cpu.process,\r\n                                              \"designer\": cpu.designer})[0]\r\n    return result\r\n\r\n\r\ndef test_cpu_init():\r\n    cpu = Cpu(\"one\", 1, 2, 3, 4, \"two\")\r\n    result = get_comp_results(cpu)\r\n    for key in cpu.get_dict().keys():\r\n        assert result[key] == cpu.get_dict()[key]\r\n\r\n\r\ndef test_cpu_transistor_count():\r\n    cpu = Cpu(\"one\", 1, 2, 3, 4, \"two\")\r\n    cpu.transistor_count = 10\r\n    results = get_comp_results(cpu)\r\n\r\n    assert cpu.transistor_count == results[\"transistor_count\"]\r\n\r\n\r\ndef test_cpu_transistor_count1():\r\n    with pytest.raises(ValueError):\r\n        cpu = Cpu(\"one\", 1, 2, 3, 4, \"two\")\r\n        cpu.transistor_count = -1\r\n\r\n\r\ndef test_processor_name_setter():\r\n    cpu = Cpu(\"one\", 1, 2, 3, 4, \"two\")\r\n    cpu.processor_name = \"Intel i7\"\r\n    results = get_comp_results(cpu)\r\n    assert cpu.processor_name == results[\"processor\"]\r\n\r\n\r\ndef test_year_of_introduction_setter_valid():\r\n    cpu = Cpu(\"one\", 1, 2, 3, 4, \"two\")\r\n    cpu.year_of_introduction = 2020\r\n    results = get_comp_results(cpu)\r\n    assert cpu.year_of_introduction == results[\"date_of_introduction\"]\r\n\r\n\r\ndef test_year_of_introduction_setter_invalid():\r\n    cpu = Cpu(\"one\", 1, 2, 3, 4, \"two\")\r\n    with pytest.raises(ValueError):\r\n        cpu.year_of_introduction = -1\r\n\r\n\r\ndef test_area_setter_valid():\r\n    cpu = Cpu(\"one\", 1, 2, 3, 4, \"two\")\r\n    cpu.area = 50\r\n    results = get_comp_results(cpu)\r\n    assert cpu.area == results[\"area\"]\r\n\r\n\r\ndef test_area_setter_invalid():\r\n    cpu = Cpu(\"one\", 1, 2, 3, 4, \"two\")\r\n    with pytest.raises(ValueError):\r\n        cpu.area = 0\r\n\r\n\r\ndef test_process_setter_valid():\r\n    cpu = Cpu(\"one\", 1, 2, 3, 4, \"two\")\r\n    cpu.process = 10\r\n    results = get_comp_results(cpu)\r\n    assert cpu.process == results[\"process\"]\r\n\r\n\r\ndef test_process_setter_invalid():\r\n    cpu = Cpu(\"one\", 1, 2, 3, 4, \"two\")\r\n    with pytest.raises(ValueError):\r\n        cpu.process = -5\r\n\r\n\r\ndef test_designer_setter():\r\n    cpu = Cpu(\"one\", 1, 2, 3, 4, \"two\")\r\n    cpu.designer = \"lili lala\"\r\n    results = get_comp_results(cpu)\r\n    assert cpu.designer == results[\"designer\"]\r\n\r\n\r\ndef test_describe_component():\r\n    cpu = Cpu(\"one\", 1, 2, 3, 4, \"two\")\r\n    results = cpu.describe_component_features()\r\n    expected_results = \"\"\"\r\n _________________________________________________________________________________\r\n|variable\t            |class\t    |description                                  |\r\n|-----------------------|-----------|---------------------------------------------|\r\n|processor\t            |string  \t|Processor name                               |\r\n|transistor_count\t    |integer    |Number of transistors                        |\r\n|date_of_introduction\t|integer\t|year introduced                              |\r\n|designer\t            |string \t|Designer                                     |\r\n|process\t            |integer    |Size of manufacturing process (in nanometers)|\r\n|area\t                |integer\t|Area of chip in square millimeters           |\r\n _________________________________________________________________________________\r\n        \"\"\"\r\n    assert results == expected_results\r\n\r\n\r\ndef test_get_dict():\r\n    cpu = Cpu(\"one\", 1, 2, 3, 4, \"two\")\r\n    results = get_comp_results(cpu)\r\n\r\n    assert cpu.get_dict() == results\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/testing/test_cpu.py b/testing/test_cpu.py
--- a/testing/test_cpu.py	(revision 31cc95f0f9f3c38e688bbb7b8f264e40479d35ea)
+++ b/testing/test_cpu.py	(date 1748966189234)
@@ -3,8 +3,8 @@
 from web_client.main import get_specific_component_s
 
 # temporary
-from client_package.web_client.cpu import Cpu
-from client_package.web_client.main import get_specific_component_s
+# from client_package.web_client.cpu import Cpu
+# from client_package.web_client.main import get_specific_component_s
 
 
 def get_comp_results(cpu: Cpu):
Index: initialize/add_data_to_mongodb_for_docker.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/initialize/add_data_to_mongodb_for_docker.py b/initialize/add_data_to_mongodb_for_docker.py
new file mode 100644
--- /dev/null	(date 1748968362973)
+++ b/initialize/add_data_to_mongodb_for_docker.py	(date 1748968362973)
@@ -0,0 +1,166 @@
+from pymongo import MongoClient
+import re
+
+
+def add_data(client):
+
+    try:
+
+        db = client["moores_law_db"]
+
+        cpu_collection = db["cpu"]
+        gpu_collection = db["gpu"]
+        ram_collection = db["ram"]
+
+        with open("./data/cpu.csv", "r") as cpu_file:
+            col_labels = cpu_file.readline().strip().split(",")
+
+            for line in cpu_file:
+                cpu = re.split(r',(?=(?:[^"]*"[^"]*")*[^"]*$)', line.strip())
+                cpu[0] = cpu[0].strip('"')
+                insert_dic = {}
+
+                for i, col_label in enumerate(col_labels):
+                    if col_label == "transistor_count":
+                        if cpu[i] != "NA":
+                            insert_dic[col_label] = int(cpu[i])
+                        else:
+                            insert_dic[col_label] = cpu[i]
+
+                    elif col_label == "date_of_introduction":
+                        if cpu[i] != "NA":
+                            insert_dic[col_label] = int(cpu[i])
+                        else:
+                            insert_dic[col_label] = cpu[i]
+
+                    elif col_label == "process":
+                        if cpu[i] != "NA":
+                            insert_dic[col_label] = int(cpu[i])
+                        else:
+                            insert_dic[col_label] = cpu[i]
+
+                    elif col_label == "area":
+                        if cpu[i] != "NA":
+                            insert_dic[col_label] = int(cpu[i])
+                        else:
+                            insert_dic[col_label] = cpu[i]
+
+                    else:
+                        insert_dic[col_label] = cpu[i]
+
+                cpu_collection.insert_one(insert_dic)
+
+        with open("./data/gpu.csv", "r") as gpu_file:
+            col_labels = gpu_file.readline().strip().split(",")
+
+            for line in gpu_file:
+                gpu = re.split(r',(?=(?:[^"]*"[^"]*")*[^"]*$)', line.strip())
+                insert_dic = {}
+
+                for i, col_label in enumerate(col_labels):
+                    if col_label == "transistor_count":
+                        if gpu[i] != "NA":
+                            insert_dic[col_label] = int(gpu[i])
+                        else:
+                            insert_dic[col_label] = gpu[i]
+
+                    elif col_label == "date_of_introduction":
+                        if gpu[i] != "NA":
+                            insert_dic[col_label] = int(gpu[i])
+                        else:
+                            insert_dic[col_label] = gpu[i]
+
+                    elif col_label == "process":
+                        if gpu[i] != "NA":
+                            insert_dic[col_label] = int(gpu[i])
+                        else:
+                            insert_dic[col_label] = gpu[i]
+
+                    elif col_label == "area":
+                        if gpu[i] != "NA":
+                            insert_dic[col_label] = int(gpu[i])
+                        else:
+                            insert_dic[col_label] = gpu[i]
+
+                    elif col_label == "ref":
+                        continue
+
+                    else:
+                        insert_dic[col_label] = gpu[i]
+
+                gpu_collection.insert_one(insert_dic)
+
+        with open("./data/ram.csv", "r") as ram_file:
+            col_labels = ram_file.readline().strip().split(",")
+
+            for line in ram_file:
+                ram = re.split(r',(?=(?:[^"]*"[^"]*")*[^"]*$)', line.strip())
+                insert_dic = {}
+
+                for i, col_label in enumerate(col_labels):
+                    if col_label == "transistor_count":
+                        if ram[i] != "NA":
+                            insert_dic[col_label] = int(ram[i])
+                        else:
+                            insert_dic[col_label] = ram[i]
+
+                    elif col_label == "capacity_bits":
+                        if ram[i] != "NA":
+                            insert_dic[col_label] = int(ram[i])
+                        else:
+                            insert_dic[col_label] = ram[i]
+
+                    elif col_label == "date_of_introduction":
+                        if ram[i] != "NA":
+                            insert_dic[col_label] = int(ram[i])
+                        else:
+                            insert_dic[col_label] = ram[i]
+
+                    elif col_label == "process":
+                        if ram[i] != "NA":
+                            insert_dic[col_label] = int(ram[i])
+                        else:
+                            insert_dic[col_label] = ram[i]
+
+                    elif col_label == "area":
+                        if ram[i] != "NA":
+                            insert_dic[col_label] = int(ram[i])
+                        else:
+                            insert_dic[col_label] = ram[i]
+
+                    elif col_label == "ref":
+                        continue
+
+                    else:
+                        insert_dic[col_label] = ram[i]
+
+                ram_collection.insert_one(insert_dic)
+
+        print("successfully migrated data to mongodb!")
+
+    except Exception as e:
+        print(f"failed to migrate data to mongodb due to {e}")
+
+    finally:
+        print("done")
+
+
+def clear_database(client):
+
+    try:
+        client.drop_database("moores_law_db")
+
+        print("Successfully removed all data")
+
+    except Exception as e:
+        print(f"clearing data failed due to {e}")
+
+    finally:
+        print("done")
+
+
+if __name__ == '__main__':
+    client = MongoClient("mongodb://ml_user:securepassword@mongodb:27017/moores_law_db?authSource=moores_law_db")
+
+    clear_database(client)
+    add_data(client)
Index: testing/test_gpu.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import pytest\r\nfrom web_client.gpu import Gpu\r\nfrom web_client.main import get_specific_component_s\r\n\r\n# temporary\r\nfrom client_package.web_client.gpu import Gpu\r\nfrom client_package.web_client.main import get_specific_component_s\r\n\r\n\r\ndef get_comp_results(gpu: Gpu):\r\n    result = get_specific_component_s(\"gpu\", {\r\n        \"processor\": gpu.processor_name,\r\n        \"transistor_count\": gpu.transistor_count,\r\n        \"date_of_introduction\": gpu.year_of_introduction,\r\n        \"area\": gpu.area,\r\n        \"process\": gpu.process,\r\n        \"designer_s\": gpu.designer,\r\n        \"manufacturer_s\": gpu.manufacturer\r\n    })[0]\r\n    return result\r\n\r\n\r\ndef test_gpu_init():\r\n    gpu = Gpu(\"one\", 1, 2, 3, 4, \"designer1\", \"manufacturer1\")\r\n    result = get_comp_results(gpu)\r\n    for key in gpu.get_dict().keys():\r\n        assert result[key] == gpu.get_dict()[key]\r\n\r\n\r\ndef test_gpu_transistor_count():\r\n    gpu = Gpu(\"one\", 1, 2, 3, 4, \"designer1\", \"manufacturer1\")\r\n    gpu.transistor_count = 10\r\n    results = get_comp_results(gpu)\r\n    assert gpu.transistor_count == results[\"transistor_count\"]\r\n\r\n\r\ndef test_gpu_transistor_count_invalid():\r\n    with pytest.raises(ValueError):\r\n        gpu = Gpu(\"one\", 1, 2, 3, 4, \"designer1\", \"manufacturer1\")\r\n        gpu.transistor_count = -1\r\n\r\n\r\ndef test_processor_name_setter():\r\n    gpu = Gpu(\"one\", 1, 2, 3, 4, \"designer1\", \"manufacturer1\")\r\n    gpu.processor_name = \"NVIDIA RTX 3080\"\r\n    results = get_comp_results(gpu)\r\n    assert gpu.processor_name == results[\"processor\"]\r\n\r\n\r\ndef test_year_of_introduction_setter_valid():\r\n    gpu = Gpu(\"one\", 1, 2, 3, 4, \"designer1\", \"manufacturer1\")\r\n    gpu.year_of_introduction = 2021\r\n    results = get_comp_results(gpu)\r\n    assert gpu.year_of_introduction == results[\"date_of_introduction\"]\r\n\r\n\r\ndef test_year_of_introduction_setter_invalid():\r\n    gpu = Gpu(\"one\", 1, 2, 3, 4, \"designer1\", \"manufacturer1\")\r\n    with pytest.raises(ValueError):\r\n        gpu.year_of_introduction = -1\r\n\r\n\r\ndef test_area_setter_valid():\r\n    gpu = Gpu(\"one\", 1, 2, 3, 4, \"designer1\", \"manufacturer1\")\r\n    gpu.area = 100\r\n    results = get_comp_results(gpu)\r\n    assert gpu.area == results[\"area\"]\r\n\r\n\r\ndef test_area_setter_invalid():\r\n    gpu = Gpu(\"one\", 1, 2, 3, 4, \"designer1\", \"manufacturer1\")\r\n    with pytest.raises(ValueError):\r\n        gpu.area = 0\r\n\r\n\r\ndef test_process_setter_valid():\r\n    gpu = Gpu(\"one\", 1, 2, 3, 4, \"designer1\", \"manufacturer1\")\r\n    gpu.process = 7\r\n    results = get_comp_results(gpu)\r\n    assert gpu.process == results[\"process\"]\r\n\r\n\r\ndef test_process_setter_invalid():\r\n    gpu = Gpu(\"one\", 1, 2, 3, 4, \"designer1\", \"manufacturer1\")\r\n    with pytest.raises(ValueError):\r\n        gpu.process = -5\r\n\r\n\r\ndef test_designer_setter():\r\n    gpu = Gpu(\"one\", 1, 2, 3, 4, \"designer1\", \"manufacturer1\")\r\n    gpu.designer = \"New Designer\"\r\n    results = get_comp_results(gpu)\r\n    assert gpu.designer == results[\"designer_s\"]\r\n\r\n\r\ndef test_manufacturer_setter():\r\n    gpu = Gpu(\"one\", 1, 2, 3, 4, \"designer1\", \"manufacturer1\")\r\n    gpu.manufacturer = \"New Manufacturer\"\r\n    results = get_comp_results(gpu)\r\n    assert gpu.manufacturer == results[\"manufacturer_s\"]\r\n\r\n\r\ndef test_describe_component():\r\n    gpu = Gpu(\"one\", 1, 2, 3, 4, \"designer1\", \"manufacturer1\")\r\n    results = gpu.describe_component_features()\r\n    expected_results = \"\"\"\r\n_________________________________________________________________________________\r\n|variable\t            |class\t    |description                                  |\r\n|-----------------------|-----------|---------------------------------------------|\r\n|processor\t            |string  \t|Processor name                               |\r\n|transistor_count\t    |integer    |Number of transistors                        |\r\n|date_of_introduction\t|integer\t|year introduced                              |\r\n|designer\t            |string \t|Designer                                     |\r\n|process\t            |integer    |Size of manufacturing process (in nanometers)|\r\n|area\t                |integer\t|Area of chip in square millimeters           |\r\n|manufacturer           |string     |manufacturer(s)                              |\r\n_________________________________________________________________________________\r\n        \"\"\"\r\n    assert results == expected_results\r\n\r\n\r\ndef test_get_dict():\r\n    gpu = Gpu(\"one\", 1, 2, 3, 4, \"designer1\", \"manufacturer1\")\r\n    results = get_comp_results(gpu)\r\n    assert gpu.get_dict() == results\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/testing/test_gpu.py b/testing/test_gpu.py
--- a/testing/test_gpu.py	(revision 31cc95f0f9f3c38e688bbb7b8f264e40479d35ea)
+++ b/testing/test_gpu.py	(date 1748966263656)
@@ -3,8 +3,8 @@
 from web_client.main import get_specific_component_s
 
 # temporary
-from client_package.web_client.gpu import Gpu
-from client_package.web_client.main import get_specific_component_s
+# from client_package.web_client.gpu import Gpu
+# from client_package.web_client.main import get_specific_component_s
 
 
 def get_comp_results(gpu: Gpu):
Index: initialize/add_data_to_mongodb.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from pymongo import MongoClient\r\nimport re\r\n\r\n\r\ndef add_data(client):\r\n\r\n    try:\r\n\r\n        db = client[\"moores_law_db\"]\r\n\r\n        cpu_collection = db[\"cpu\"]\r\n        gpu_collection = db[\"gpu\"]\r\n        ram_collection = db[\"ram\"]\r\n\r\n        with open(\"./data/cpu.csv\", \"r\") as cpu_file:\r\n            col_labels = cpu_file.readline().strip().split(\",\")\r\n\r\n            for line in cpu_file:\r\n                cpu = re.split(r',(?=(?:[^\"]*\"[^\"]*\")*[^\"]*$)', line.strip())\r\n                cpu[0] = cpu[0].strip('\"')\r\n                insert_dic = {}\r\n\r\n                for i, col_label in enumerate(col_labels):\r\n                    if col_label == \"transistor_count\":\r\n                        if cpu[i] != \"NA\":\r\n                            insert_dic[col_label] = int(cpu[i])\r\n                        else:\r\n                            insert_dic[col_label] = cpu[i]\r\n\r\n                    elif col_label == \"date_of_introduction\":\r\n                        if cpu[i] != \"NA\":\r\n                            insert_dic[col_label] = int(cpu[i])\r\n                        else:\r\n                            insert_dic[col_label] = cpu[i]\r\n\r\n                    elif col_label == \"process\":\r\n                        if cpu[i] != \"NA\":\r\n                            insert_dic[col_label] = int(cpu[i])\r\n                        else:\r\n                            insert_dic[col_label] = cpu[i]\r\n\r\n                    elif col_label == \"area\":\r\n                        if cpu[i] != \"NA\":\r\n                            insert_dic[col_label] = int(cpu[i])\r\n                        else:\r\n                            insert_dic[col_label] = cpu[i]\r\n\r\n                    else:\r\n                        insert_dic[col_label] = cpu[i]\r\n\r\n                cpu_collection.insert_one(insert_dic)\r\n\r\n        with open(\"./data/gpu.csv\", \"r\") as gpu_file:\r\n            col_labels = gpu_file.readline().strip().split(\",\")\r\n\r\n            for line in gpu_file:\r\n                gpu = re.split(r',(?=(?:[^\"]*\"[^\"]*\")*[^\"]*$)', line.strip())\r\n                insert_dic = {}\r\n\r\n                for i, col_label in enumerate(col_labels):\r\n                    if col_label == \"transistor_count\":\r\n                        if gpu[i] != \"NA\":\r\n                            insert_dic[col_label] = int(gpu[i])\r\n                        else:\r\n                            insert_dic[col_label] = gpu[i]\r\n\r\n                    elif col_label == \"date_of_introduction\":\r\n                        if gpu[i] != \"NA\":\r\n                            insert_dic[col_label] = int(gpu[i])\r\n                        else:\r\n                            insert_dic[col_label] = gpu[i]\r\n\r\n                    elif col_label == \"process\":\r\n                        if gpu[i] != \"NA\":\r\n                            insert_dic[col_label] = int(gpu[i])\r\n                        else:\r\n                            insert_dic[col_label] = gpu[i]\r\n\r\n                    elif col_label == \"area\":\r\n                        if gpu[i] != \"NA\":\r\n                            insert_dic[col_label] = int(gpu[i])\r\n                        else:\r\n                            insert_dic[col_label] = gpu[i]\r\n\r\n                    elif col_label == \"ref\":\r\n                        continue\r\n\r\n                    else:\r\n                        insert_dic[col_label] = gpu[i]\r\n\r\n                gpu_collection.insert_one(insert_dic)\r\n\r\n        with open(\"./data/ram.csv\", \"r\") as ram_file:\r\n            col_labels = ram_file.readline().strip().split(\",\")\r\n\r\n            for line in ram_file:\r\n                ram = re.split(r',(?=(?:[^\"]*\"[^\"]*\")*[^\"]*$)', line.strip())\r\n                insert_dic = {}\r\n\r\n                for i, col_label in enumerate(col_labels):\r\n                    if col_label == \"transistor_count\":\r\n                        if ram[i] != \"NA\":\r\n                            insert_dic[col_label] = int(ram[i])\r\n                        else:\r\n                            insert_dic[col_label] = ram[i]\r\n\r\n                    elif col_label == \"capacity_bits\":\r\n                        if ram[i] != \"NA\":\r\n                            insert_dic[col_label] = int(ram[i])\r\n                        else:\r\n                            insert_dic[col_label] = ram[i]\r\n\r\n                    elif col_label == \"date_of_introduction\":\r\n                        if ram[i] != \"NA\":\r\n                            insert_dic[col_label] = int(ram[i])\r\n                        else:\r\n                            insert_dic[col_label] = ram[i]\r\n\r\n                    elif col_label == \"process\":\r\n                        if ram[i] != \"NA\":\r\n                            insert_dic[col_label] = int(ram[i])\r\n                        else:\r\n                            insert_dic[col_label] = ram[i]\r\n\r\n                    elif col_label == \"area\":\r\n                        if ram[i] != \"NA\":\r\n                            insert_dic[col_label] = int(ram[i])\r\n                        else:\r\n                            insert_dic[col_label] = ram[i]\r\n\r\n                    elif col_label == \"ref\":\r\n                        continue\r\n\r\n                    else:\r\n                        insert_dic[col_label] = ram[i]\r\n\r\n                ram_collection.insert_one(insert_dic)\r\n\r\n        print(\"successfully migrated data to mongodb!\")\r\n\r\n    except Exception as e:\r\n        print(f\"failed to migrate data to mongodb due to {e}\")\r\n\r\n    finally:\r\n        print(\"done\")\r\n\r\n\r\ndef clear_database(client):\r\n\r\n    try:\r\n        client.drop_database(\"moores_law_db\")\r\n\r\n        print(\"Successfully removed all data\")\r\n\r\n    except Exception as e:\r\n        print(f\"clearing data failed due to {e}\")\r\n\r\n    finally:\r\n        print(\"done\")\r\n\r\n\r\nif __name__ == '__main__':\r\n    client = MongoClient(\"mongodb://ml_user:securepassword@mongodb:27017/moores_law_db?authSource=moores_law_db\")\r\n    client = MongoClient(\"mongodb://localhost:27017/\")\r\n\r\n    clear_database(client)\r\n    add_data(client)\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/initialize/add_data_to_mongodb.py b/initialize/add_data_to_mongodb.py
--- a/initialize/add_data_to_mongodb.py	(revision 31cc95f0f9f3c38e688bbb7b8f264e40479d35ea)
+++ b/initialize/add_data_to_mongodb.py	(date 1748967974259)
@@ -160,7 +160,7 @@
 
 
 if __name__ == '__main__':
-    client = MongoClient("mongodb://ml_user:securepassword@mongodb:27017/moores_law_db?authSource=moores_law_db")
+    # client = MongoClient("mongodb://ml_user:securepassword@mongodb:27017/moores_law_db?authSource=moores_law_db")
     client = MongoClient("mongodb://localhost:27017/")
 
     clear_database(client)
