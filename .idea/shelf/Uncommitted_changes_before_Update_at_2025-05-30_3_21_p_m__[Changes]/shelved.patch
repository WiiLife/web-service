Index: client_package/web_client/main.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import requests\r\nimport matplotlib.pyplot as plt\r\n\r\n# creates requests in HTTP to the web service\r\n# gets data in json format from the web service\r\n\r\n\r\ndef home_message() -> dict:\r\n    r = requests.get('http://127.0.0.1:5050')\r\n    return r.json()\r\n\r\n\r\ndef get_component_names() -> list[str]:\r\n    r = requests.get('http://127.0.0.1:5050/component_names')\r\n    return r.json()\r\n\r\n\r\ndef get_components_features(collection_name: str) -> list | Exception:\r\n    try:\r\n        collection = get_a_collection(collection_name, as_dict=True)\r\n        a_component = collection[0]\r\n        return list(a_component.keys())\r\n\r\n    except Exception as e:\r\n        return e\r\n\r\n\r\ndef get_all_collections() -> list[dict]:\r\n    r = requests.get('http://127.0.0.1:5050/all_components')\r\n    return r.json()\r\n\r\n\r\ndef get_a_collection(collection_name: str, as_dict: bool = False) -> list[dict] | dict:\r\n    r = requests.get(f'http://127.0.0.1:5050/{collection_name}')\r\n\r\n    return r.json()\r\n\r\n\r\ndef check_if_component_exists(data) -> bool | Exception:\r\n\r\n    try:\r\n        data = data.get_dict()\r\n    except Exception as e:\r\n        return e\r\n\r\n    collections = get_component_names()\r\n    for col in collections:\r\n        if get_specific_component_s(col, data):\r\n            return True\r\n    return False\r\n\r\n\r\ndef get_specific_component_s(collection_name: str, query: dict = None, as_dict: bool = False) -> dict | list[dict]:\r\n    # can also get all collection if no query\r\n\r\n    r = requests.get(f'http://127.0.0.1:5050/{collection_name}', params=query)\r\n\r\n    return r.json()\r\n\r\n\r\ndef add_data(collection_name: str, data: dict, as_dict: bool = False) -> None:\r\n    # only for 1 component\r\n    r = requests.post(f'http://127.0.0.1:5050/{collection_name}', json=data)\r\n    print(r.json())\r\n\r\n\r\ndef add_many(collection_name: str, data: list[dict]) -> None:\r\n    for data_component in data:\r\n        add_data(collection_name, data_component)\r\n\r\n\r\ndef update_a_component(collection_name: str, query: dict, data: dict) -> None:\r\n    r = requests.put(f'http://127.0.0.1:5050/{collection_name}', json=data, params=query)\r\n    print(r.json())\r\n\r\n\r\ndef delete_component_s(collection_name: str, query: dict = None) -> None:\r\n    # can delete more than one component, whole collection if no query\r\n    if query:\r\n        r = requests.delete(f'http://127.0.0.1:5050/{collection_name}', params=query)\r\n\r\n    else:\r\n        r = requests.delete(f'http://127.0.0.1:5050/{collection_name}', params={})\r\n\r\n    print(r.json())\r\n\r\n\r\ndef delete_collection(collection_name: str) -> None:\r\n    r = requests.delete(f'http://127.0.0.1:5050/{collection_name}', params={})\r\n    print(r.json())\r\n\r\n\r\ndef _is_number(val):\r\n    try:\r\n        float(val)\r\n        return True\r\n    except (ValueError, TypeError):\r\n        return False\r\n\r\n\r\ndef _check_if_feature_is_numeric(feature: str, collections: list[str]) -> bool | Exception:\r\n    for collection_name in collections:\r\n        collection = get_a_collection(collection_name, as_dict=True)\r\n        value = \"NA\"\r\n        try:\r\n\r\n            i = 0\r\n            while value == \"NA\":\r\n                value = collection[i][feature]\r\n                i += 1\r\n\r\n            if not _is_number(value):\r\n                return False\r\n\r\n        except Exception as e:\r\n            return e\r\n\r\n    return True\r\n\r\n\r\ndef _sort_by_component_feature(collection_name: str, feature: str) -> list[dict] | Exception:\r\n    collection = get_a_collection(collection_name, as_dict=True)\r\n    value = \"NA\"\r\n    try:\r\n\r\n        i = 0\r\n        while value == \"NA\":\r\n            value = collection[i][feature]\r\n            i += 1\r\n\r\n        if not _is_number(value):\r\n            raise ValueError(\"feature has to be integer or float\")\r\n\r\n    except Exception as e:\r\n        return e\r\n\r\n    filtered = [doc for doc in collection if _is_number(doc.get(feature))]\r\n    return sorted(filtered, key=lambda x: x.get(feature, 0))\r\n\r\n\r\ndef plot_components(collection_names: list[str] | str, feature: str, logged: bool = False):\r\n\r\n    if isinstance(collection_names, str):\r\n        collection_names = [collection_names]\r\n\r\n    if _check_if_feature_is_numeric(feature, collection_names) and feature != \"date_of_introduction\":\r\n\r\n        fig, ax = plt.subplots(1, len(collection_names))\r\n\r\n        fig.suptitle(f\"{feature} vs. Time\")\r\n\r\n        for i, col_name in enumerate(collection_names):\r\n            sorted_collection = _sort_by_component_feature(col_name, \"date_of_introduction\")\r\n            years = [d[\"date_of_introduction\"] for d in sorted_collection if d[feature] != \"NA\"]\r\n            tr_counts = [d[feature] for d in sorted_collection if d[feature] != \"NA\"]\r\n\r\n            if logged:\r\n                if len(collection_names) > 1:\r\n                    ax[i].set_yscale(\"log\")\r\n                else:\r\n                    ax.set_yscale(\"log\")\r\n\r\n            if len(collection_names) > 1:\r\n                ax[i].scatter(years, tr_counts)\r\n                ax[i].set_title(f\"{col_name}\")\r\n                ax[i].set_xlabel(\"Year\")\r\n                ax[i].set_ylabel(f\"{feature}\")\r\n            else:\r\n                ax.scatter(years, tr_counts)\r\n                ax.set_title(f\"{col_name}\")\r\n                ax.set_xlabel(\"Year\")\r\n                ax.set_ylabel(f\"{feature}\")\r\n\r\n        plt.show()\r\n\r\n    else:\r\n        raise ValueError(\"features not present in all components given or feature is not numeric\")\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/client_package/web_client/main.py b/client_package/web_client/main.py
--- a/client_package/web_client/main.py	(revision 4ef3c7328a34bbccb626c8d9666bc911b41a69a2)
+++ b/client_package/web_client/main.py	(date 1748611230133)
@@ -40,8 +40,8 @@
 
     try:
         data = data.get_dict()
-    except Exception as e:
-        return e
+    except :
+        pass
 
     collections = get_component_names()
     for col in collections:
@@ -50,7 +50,7 @@
     return False
 
 
-def get_specific_component_s(collection_name: str, query: dict = None, as_dict: bool = False) -> dict | list[dict]:
+def get_specific_component_s(collection_name: str, query: dict = None) -> dict | list[dict]:
     # can also get all collection if no query
 
     r = requests.get(f'http://127.0.0.1:5050/{collection_name}', params=query)
@@ -58,8 +58,14 @@
     return r.json()
 
 
-def add_data(collection_name: str, data: dict, as_dict: bool = False) -> None:
+def add_data(collection_name: str, data) -> None | Exception:
     # only for 1 component
+
+    try:
+        data = data.get_dict()
+    except Exception as e:
+        return e
+
     r = requests.post(f'http://127.0.0.1:5050/{collection_name}', json=data)
     print(r.json())
 
Index: demo_project/demo.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from web_client.main import *\r\nfrom web_client.turn_dict_to_obj import make_dict_to_obj, make_list_of_dict_to_obj\r\n\r\nfrom client_package.build.lib.web_client.main import get_a_collection\r\n\r\n# shows all the different functionalities of the client library\r\n# remember to get the main from the client library as a package and not form the local directory\r\n\r\n\r\nif __name__ == '__main__':\r\n\r\n    # print(home_message()[\"authors\"])\r\n\r\n    # print(get_a_collection(\"cpu\"))\r\n\r\n    # print(get_specific_component_s(\"cpu\", {\"designer\": \"williams processor 123\"}))\r\n\r\n    \"\"\"my_data = {\"area\": 30,\r\n               \"date_of_introduction\": 1970,\r\n               \"designer\": \"williams processor 123\",\r\n               \"process\": \"NA\",\r\n               \"processor\": \"MP944 (20-bit, 6-chip)\",\r\n               \"transistor_count\": \"NA\"\r\n               }\r\n    add_data(\"cpu\", my_data)\"\"\"\r\n\r\n    \"\"\"my_data = [{\"area\": 25,\r\n                \"date_of_introduction\": 1974,\r\n                \"designer\": \"williams processor 123\",\r\n                \"process\": \"NA\",\r\n                \"processor\": \"MP944 (20-bit, 6-chip)\",\r\n                \"transistor_count\": \"NA\"\r\n                },\r\n               {\"area\": 30,\r\n                \"date_of_introduction\": 1989,\r\n                \"designer\": \"williams processor 123\",\r\n                \"process\": \"NA\",\r\n                \"processor\": \"MP944 (20-bit, 6-chip)\",\r\n                \"transistor_count\": \"NA\"\r\n                }]\r\n\r\n    add_many(\"cpu\", my_data)\"\"\"\r\n\r\n    # print(get_component_names())\r\n\r\n    \"\"\"query_comp = {\"area__lt\": 10}\r\n    print(get_specific_component_s(\"cpu\", query_comp))\"\"\"\r\n\r\n    \"\"\"query = {\"date_of_introduction\": 1974, \"area__lt\": 12}\r\n    data = {\"cool_guy\": \"william\"}\r\n    update_a_component(\"cpu\", query, data)\"\"\"\r\n\r\n    # print(get_specific_component_s(\"cpu\", {\"area__lt\": 12, \"date_of_introduction\": 1974}))\r\n\r\n    # delete_component_s(\"cpu\", {\"date_of_introduction__gte\": 2019})\r\n\r\n    # print(get_specific_component_s(\"cpu\", {\"date_of_introduction__gte\": 2019}))\r\n\r\n    # delete_collection(\"ram\")\r\n\r\n    \"\"\"data = get_specific_component_s(\"gpu\", {\"date_of_introduction__gte\": 2008, 'transistor_count': 210000000})\r\n    print(make_dict_to_obj(\"gpu\", data[0]))\"\"\"\r\n\r\n    # print(get_components_features(\"cpu\"))\r\n\r\n    # plot_components([\"gpu\", \"cpu\", \"ram\"], \"process\", logged=False)\r\n\r\n    # print(check_if_component_exists({\"date_of_introduction__gte\": 2020}))\r\n\r\n    \"\"\"print(get_specific_component_s(\"cpu\", {\"date_of_introduction__gte\": 2008, 'transistor_count': 47000000}))\r\n\r\n    update_a_component(\"cpu\", {\"date_of_introduction__gte\": 2008, 'transistor_count': 47000000},\r\n                       {\"processor\": \"very cool processor\"})\"\"\"\r\n\r\n    \"\"\"cpu1 = make_dict_to_obj({\"area\": 10, \"date_of_introduction\": 2025, \"designer\": \"William\", \"process\": 50, \"processor\": \"cool processor\", \"transistor_count\": 15000000})\r\n    print(check_if_component_exists(cpu1))\r\n\r\n    print(cpu1)\r\n    cpu1.processor_name = \"even cooler processor\"\r\n    print(cpu1)\r\n    print(check_if_component_exists(cpu1))\"\"\"\r\n\r\n    print(get_a_collection(\"cpu\"))\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/demo_project/demo.py b/demo_project/demo.py
--- a/demo_project/demo.py	(revision 4ef3c7328a34bbccb626c8d9666bc911b41a69a2)
+++ b/demo_project/demo.py	(date 1748611230149)
@@ -80,4 +80,6 @@
     print(cpu1)
     print(check_if_component_exists(cpu1))"""
 
+    print(check_if_component_exists({"date_of_introduction__gte": 2008, 'transistor_count': 47000000}))
+
     print(get_a_collection("cpu"))
Index: testing/test_main.py
===================================================================
diff --git a/testing/test_main.py b/testing/test_main.py
deleted file mode 100644
--- a/testing/test_main.py	(revision 4ef3c7328a34bbccb626c8d9666bc911b41a69a2)
+++ /dev/null	(revision 4ef3c7328a34bbccb626c8d9666bc911b41a69a2)
@@ -1,18 +0,0 @@
-import pytest
-from web_client.main import *
-from web_client.cpu import Cpu
-from web_client.gpu import Gpu
-from web_client.ram import Ram
-from web_service_project.common_route_methods.parse import parse_query_string
-
-
-def test_home_message():
-    result = home_message()
-    assert isinstance(result, dict)
-
-
-def test_get_component_names():
-    result = get_component_names()
-    assert isinstance(result, list)
-
-
Index: ../.idea/modules.xml
===================================================================
diff --git a/../.idea/modules.xml b/../.idea/modules.xml
deleted file mode 100644
--- a/../.idea/modules.xml	(revision 4ef3c7328a34bbccb626c8d9666bc911b41a69a2)
+++ /dev/null	(revision 4ef3c7328a34bbccb626c8d9666bc911b41a69a2)
@@ -1,8 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<project version="4">
-  <component name="ProjectModuleManager">
-    <modules>
-      <module fileurl="file://$PROJECT_DIR$/.idea/web_service.iml" filepath="$PROJECT_DIR$/.idea/web_service.iml" />
-    </modules>
-  </component>
-</project>
\ No newline at end of file
Index: testing/main_test.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/testing/main_test.py b/testing/main_test.py
new file mode 100644
--- /dev/null	(date 1748611230156)
+++ b/testing/main_test.py	(date 1748611230156)
@@ -0,0 +1,91 @@
+import pytest
+from web_client.main import *
+from web_client.cpu import Cpu
+from web_client.gpu import Gpu
+from web_client.ram import Ram
+from web_service_project.common_route_methods.parse import parse_query_string
+
+
+def test_home_message():
+    result = home_message()
+    assert isinstance(result, dict)
+
+
+def test_get_component_names():
+    result = get_component_names()
+    assert isinstance(result, list)
+
+
+def test_get_components_features():
+    collection = "cpu"
+    data = get_components_features(collection)
+    assert isinstance(data, list)
+
+
+def test_get_components_features1():
+    collection = "lala"
+    data = get_components_features(collection)
+    assert isinstance(data, Exception)
+
+
+def test_get_all_collections():
+    data = get_all_collections()
+    assert isinstance(data, list)
+
+
+def test_get_a_collection():
+    collection = "cpu"
+    data = get_a_collection(collection)
+    assert isinstance(data, list)
+
+
+def test_get_a_collection1():
+    collection = "lala"
+    data = get_a_collection(collection)
+    assert isinstance(data, dict)
+
+
+def test_check_if_component_exists():
+    component_data = get_specific_component_s("cpu", {})
+    boolean = check_if_component_exists(component_data)
+    assert boolean == True
+
+
+def test_check_if_component_exists1():
+    component_data = get_specific_component_s("cpu", {"date_of_introduction": 1000})
+    boolean = check_if_component_exists(component_data)
+    assert boolean == False
+
+
+def test_get_specific_component_s():
+    component_data = get_specific_component_s("cpu", {"date_of_introduction__gt": 1000})
+    assert isinstance(component_data, list)
+
+
+def test_get_specific_component_s1():
+    component_data = get_specific_component_s("cpu", {"date_of_introduction__lt": 1000})
+    assert isinstance(component_data, Exception)
+
+
+def test_get_specific_component_s2():
+    component_data = get_specific_component_s(None, {"date_of_introduction__lt": 1000})
+    assert isinstance(component_data, Exception)
+
+
+def test_get_specific_component_s3():
+    component_data = get_specific_component_s("cpu", {})
+    assert isinstance(component_data, list)
+
+
+def test_get_specific_component_s4():
+    component_data = get_specific_component_s("cpu", None)
+    assert isinstance(component_data, list)
+
+
+def test_get_specific_component_s5():
+    component_data = get_specific_component_s(None, None)
+    assert isinstance(component_data, dict)
+
+
+def test_add_data():
+    add_data("cpu", {})
\ No newline at end of file
Index: web_service_project/run_web_service.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from flask import Flask\r\nfrom pymongo import MongoClient\r\nfrom web_service_project.routes.cpu_web_service import cpu_bp\r\nfrom web_service_project.routes.gpu_web_service import gpu_bp\r\nfrom web_service_project.routes.ram_web_service import ram_bp\r\n\r\n\r\ndef create_app():\r\n    app = Flask(__name__)\r\n\r\n    client = MongoClient(\"mongodb://ml_user:securepassword@mongodb:27017/moores_law_db?authSource=moores_law_db\")\r\n    db = client[\"moores_law_db\"]\r\n\r\n    # Register Blueprints\r\n    app.register_blueprint(cpu_bp, url_prefix=\"/cpu\")\r\n    app.register_blueprint(gpu_bp, url_prefix=\"/gpu\")\r\n    app.register_blueprint(ram_bp, url_prefix=\"/ram\")\r\n\r\n    @app.route(\"/\")\r\n    def home():\r\n        return {\"message\": \"welcome to our web service\",\r\n                \"authors\": [\"William Ambrosetti\", \"Youssef Sedra\"],\r\n                \"methods\": [\"get_all_data\",\r\n                            \"get_specific_data\",\r\n                            \"add_data\",\r\n                            \"update_specific_component\",\r\n                            \"delete_specific_component\"]}, 200\r\n\r\n    @app.route(\"/all_components\")\r\n    def get_all_comp():\r\n        collections = db.list_collection_names()\r\n        all_comp = []\r\n\r\n        for col in collections:\r\n            all_comp.append(list(db[col].find({}, {\"_id\": 0})))\r\n\r\n        # flattened list\r\n        return [item for sublist in all_comp for item in sublist]\r\n\r\n    @app.route(\"/component_names\")\r\n    def get_component_names():\r\n        return db.list_collection_names()\r\n\r\n    return app\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    app = create_app()\r\n    app.run(host=\"0.0.0.0\", port=5050, debug=True)\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/web_service_project/run_web_service.py b/web_service_project/run_web_service.py
--- a/web_service_project/run_web_service.py	(revision 4ef3c7328a34bbccb626c8d9666bc911b41a69a2)
+++ b/web_service_project/run_web_service.py	(date 1748611230172)
@@ -20,11 +20,18 @@
     def home():
         return {"message": "welcome to our web service",
                 "authors": ["William Ambrosetti", "Youssef Sedra"],
-                "methods": ["get_all_data",
-                            "get_specific_data",
+                "methods": ["get_component_names",
+                            "get_components_features",
+                            "get_all_collections",
+                            "get_a_collection",
+                            "check_if_component_exists",
+                            "get_specific_component_s",
                             "add_data",
-                            "update_specific_component",
-                            "delete_specific_component"]}, 200
+                            "add_many",
+                            "update_a_component",
+                            "delete_component_s",
+                            "delete_collection",
+                            "plot_components"]}, 200
 
     @app.route("/all_components")
     def get_all_comp():
